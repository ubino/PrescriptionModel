package eu.dedalus.prescriptionmodel;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import eu.dedalus.prescriptionmodel.Interaction;
import eu.dedalus.prescriptionmodel.Exemption;
import eu.dedalus.prescriptionmodel.Diagnosis;
import eu.dedalus.prescriptionmodel.CommonData;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class Drug extends BaseDrug implements java.io.Serializable, Cloneable, CommonDataInterface {

	static final long serialVersionUID = 1L;

    @org.kie.api.definition.type.Label("Definizione dati comuni")
	private CommonData commonData = new CommonData();

	@org.kie.api.definition.type.Label("Fascia")
	private String group;

	@org.kie.api.definition.type.Label("Usa la nota")
	private Boolean useNote;
	@org.kie.api.definition.type.Label("selected note")
	private String note;

	@org.kie.api.definition.type.Label("Sostituibilita'")
	private boolean replaceable = true;
	@org.kie.api.definition.type.Label("the reason of replaceable flag")
	private java.lang.String replaceableReason;

	@org.kie.api.definition.type.Label("Quantita'")
	private int quantity;

	@org.kie.api.definition.type.Description(value = "map for drugs properties PHT etc..")
	private Map<String, Boolean> drugFlags = new HashMap<>();

	@org.kie.api.definition.type.Label("Intolleranze ad altri principi attivi")
	private List<Interaction> intolerances;

	@org.kie.api.definition.type.Label("all availabel note for drugs")
	private List<String> availableNotes;

	@org.kie.api.definition.type.Label(value = "the selected reason for a drug covered by brevet ")
	private java.lang.String brevetReason;
    
    @org.kie.api.definition.type.Label("gruppo di equivalenza")
	private String equivGroup;
    
	@org.kie.api.definition.type.Label("prescription reason")
    private java.lang.String prescReason;
	
	
	@org.kie.api.definition.type.Label("dpc reason")
	private java.lang.String dpcReason;
	
	@org.kie.api.definition.type.Label("tipo prescrivibilit√†")
	private String typePrescription;
	
	@org.kie.api.definition.type.Label("tipo stupefacente")
	private String	psychotropicCategory;
	
	@org.kie.api.definition.type.Label("tipo ricetta")
	private String	supplyType;
	
	@org.kie.api.definition.type.Label("care plan protocol number")
    private String carePlanNumber;
    
	@org.kie.api.definition.type.Label("descrizione principio attivo")
	private String descActIngredient;
	
	public java.lang.String getDpcReason() {
		return dpcReason;
	}

	public void setDpcReason(java.lang.String dpcReason) {
		this.dpcReason = dpcReason;
	}
	
	public java.lang.String getPrescReason() {
		return prescReason;
	}

	public void setPrescReason(java.lang.String prescReason) {
		this.prescReason = prescReason;
	}
		
	public java.lang.String getCarePlanNumber() {
		return carePlanNumber;
	}

	public void setCarePlanNumber(java.lang.String carePlanNumber) {
		this.carePlanNumber = carePlanNumber;
	}
	
	public java.lang.String getDescActIngredient() {
		return descActIngredient;
	}

	public void setDescActIngredient(java.lang.String descActIngredient) {
		this.descActIngredient = descActIngredient;
	}
	public Drug() {
	}
	
	public String getTypePrescription() {
		return typePrescription;
	}

	public void setTypePrescription(String typePrescription) {
		this.typePrescription = typePrescription;
	}
    
    public String getEquivGroup() {
		return equivGroup;
	}

	public void setEquivGroup(String equivGroup) {
		this.equivGroup = equivGroup;
	}
	
	public String getGroup() {
		return this.group;
	}

	public void setGroup(String group) {
		this.group = group;
	}

	public Boolean getUseNote() {
		return this.useNote;
	}

	public void setUseNote(Boolean useNote) {
		this.useNote = useNote;
	}

	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		if (note != null && !note.isEmpty()) {
			this.useNote = true;
		}
		this.note = note;
	}

	public boolean isReplaceable() {
		return this.replaceable;
	}

	public void setReplaceable(boolean replaceable) {
		this.replaceable = replaceable;
	}
	
	public int getQuantity() {
		return this.quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	public Map<String, Boolean> getDrugFlags() {
		return this.drugFlags;
	}

	public void setDrugFlags(Map<String, Boolean> drugFlags) {
		this.drugFlags = drugFlags;
	}
	
	public void addDrugFlags(String key , Boolean value) {
		if(this.drugFlags == null){
		    this.drugFlags = new HashMap<>();
		}
		this.drugFlags.put(key, value);
	}
	
	public List<Interaction> getIntolerances() {
		return this.intolerances;
	}

	public void setIntolerances(List<Interaction> intolerances) {
		this.intolerances = intolerances;
	}
	
	public void addInteraction(Integer ai, String effect) {
		Interaction i = new Interaction();
		i.setActiveIngredient(ai);
		i.setEffect(effect);
		if (this.intolerances == null)
			this.intolerances = new ArrayList<>();
		this.intolerances.add(i);
	}

	public java.util.List<String> getAvailableNotes() {
		return this.availableNotes;
	}

	public void setAvailableNotes(List<String> availableNotes) {
		this.availableNotes = availableNotes;
	}
	
	public java.lang.String getReplaceableReason() {
		return this.replaceableReason;
	}

	public void setReplaceableReason(java.lang.String replaceableReason) {
		this.replaceableReason = replaceableReason;
	}
	
	public java.lang.String getBrevetReason() {
		return this.brevetReason;
	}

	public void setBrevetReason(java.lang.String brevetReason) {
		this.brevetReason = brevetReason;
	}
    
    public void setCommonData(CommonData data){
	    this.commonData = data;
	}
	
    @Override
	public Drug clone() throws CloneNotSupportedException {
		// Define a shallow copy for Drug element
		Drug d = (Drug) super.clone();
		// d.setCommonData(commonData.clone());
		return d;
	}
	
    public String toString() {
		return "Drug[minsan=" + getMinsan() + ", atc=" + getAtc() +" description=" + getDescription() + " ]";
	}

    //CommoData decorator
    
    public String getId() {
		return this.commonData.getId();
	}

	public void setId(String id) {
		this.commonData.setId(id);
	}

	public String getType() {
		return this.commonData.getType();
	}

	public void setType(String type) {
		this.commonData.setType(type);
	}

	public String getInductor() {
		return this.commonData.getInductor();
	}

	public void setInductor(String inductor) {
		this.commonData.setInductor(inductor);
	}

	public boolean isDemat() {
		return this.commonData.isDemat();
	}

	public void setDemat(boolean demat) {
		this.commonData.setDemat(demat);
	}

	public List<Exemption> getAvailableExemptions() {
		return this.commonData.getAvailableExemptions();
	}

	public void setAvailableExemptions(List<Exemption> availableExemptions) {
		this.commonData.setAvailableExemptions(availableExemptions);
	}

	public Exemption getExemption() {
		return this.commonData.getExemption();
	}

	public void setExemption(Exemption exemption) {
		this.commonData.setExemption(exemption);
	}

	public Map<String, Boolean> getCheckFlags() {
		return this.commonData.getCheckFlags();
	}

	public void setCheckFlags(Map<String, Boolean> checkFlags) {
		this.commonData.setCheckFlags(checkFlags);
	}
	
	public void addCheckFlags(String key , Boolean value) {
		this.commonData.addCheckFlags(key, value);
	}

	public List<Notification> getErrors() {
		return this.commonData.getErrors();
	}

	public void setErrors(List<Notification> errors) {
		this.commonData.setErrors(errors);
	}

	public List<Notification> getWarnings() {
		return this.commonData.getWarnings();
	}

	public void setWarnings(List<Notification> warnings) {
		this.commonData.setWarnings(warnings);
	}

	public void addAvailableExemptions(String code, String type) {
		this.commonData.addAvailableExemptions(code, type);
	}

	public boolean isGranted() {
		return this.commonData.isGranted();
	}

	public void setGranted(boolean granted) {
		this.commonData.setGranted(granted);
	}

	public List<Notification> getInformations() {
		return this.commonData.getInformations();
	}

	public void setInformations(List<Notification> informations) {
		this.commonData.setInformations(informations);
	}

	public String getOverTheCounterReason() {
		return this.commonData.getOverTheCounterReason();
	}

	public void setOverTheCounterReason(String overTheCounterReason) {
		this.commonData.setOverTheCounterReason(overTheCounterReason);
	}

	public List<Diagnosis> getDiagnosis() {
		return this.commonData.getDiagnosis();
	}

	public void setDiagnosis(List<Diagnosis> diagnosis) {
		this.commonData.setDiagnosis(diagnosis);
	}

   	public String getPsychotropicCategory() {
		return psychotropicCategory;
	}

	public void setPsychotropicCategory(String psychotropicCategory) {
		this.psychotropicCategory = psychotropicCategory;
	}
	
		public String getSupplyType() {
		return supplyType;
	}

	public void setSupplyType(String supplyType) {
		this.supplyType = supplyType;
	}
}